// Copyright 2025 SoloOps Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package generator

import (
	"fmt"
	"strings"
)

func (g *Generator) generateMain() error {
	var resources strings.Builder

	resources.WriteString("# Generated by SoloOps\n")
	resources.WriteString(fmt.Sprintf("# Project: %s\n", g.Config.Project))
	resources.WriteString(fmt.Sprintf("# Environment: %s\n\n", g.Env.Name))

	// Generate resources for each blueprint
	for name, blueprint := range g.Env.Blueprints {
		resources.WriteString(fmt.Sprintf("# Blueprint: %s\n", name))

		// Determine blueprint type and generate accordingly
		if blueprint.Runtime != "" || blueprint.Ingress != "" {
			// Web API blueprint
			resources.WriteString(g.generateWebAPI(name, blueprint))
		} else if blueprint.Domain != "" {
			// Static site blueprint
			resources.WriteString(g.generateStaticSite(name, blueprint))
		} else if blueprint.DBType != "" {
			// Database blueprint
			resources.WriteString(g.generateDatabase(name, blueprint))
		}

		resources.WriteString("\n")
	}

	return g.writeFile("main.tf", resources.String())
}

func (g *Generator) generateWebAPI(name string, bp interface{}) string {
	if g.Config.Cloud != "aws" {
		return "# Web API blueprint currently only supports AWS\n"
	}

	return fmt.Sprintf(`
# Lambda function for %s
resource "aws_lambda_function" "%s" {
  function_name = "${var.project_name}-${var.environment}-%s"
  role          = aws_iam_role.%s_lambda_role.arn
  handler       = "index.handler"
  runtime       = "nodejs18.x"
  filename      = "lambda_placeholder.zip"

  environment {
    variables = {
      ENVIRONMENT = var.environment
    }
  }
}

resource "aws_iam_role" "%s_lambda_role" {
  name = "${var.project_name}-${var.environment}-%s-lambda-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "%s_lambda_policy" {
  role       = aws_iam_role.%s_lambda_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# API Gateway
resource "aws_apigatewayv2_api" "%s" {
  name          = "${var.project_name}-${var.environment}-%s"
  protocol_type = "HTTP"
}

resource "aws_apigatewayv2_integration" "%s" {
  api_id           = aws_apigatewayv2_api.%s.id
  integration_type = "AWS_PROXY"
  integration_uri  = aws_lambda_function.%s.invoke_arn
}

resource "aws_apigatewayv2_route" "%s" {
  api_id    = aws_apigatewayv2_api.%s.id
  route_key = "$default"
  target    = "integrations/${aws_apigatewayv2_integration.%s.id}"
}

resource "aws_apigatewayv2_stage" "%s" {
  api_id      = aws_apigatewayv2_api.%s.id
  name        = "$default"
  auto_deploy = true
}

resource "aws_lambda_permission" "%s" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.%s.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_apigatewayv2_api.%s.execution_arn}/*/*"
}

# WAF for API protection
resource "aws_wafv2_web_acl" "%s" {
  name  = "${var.project_name}-${var.environment}-%s-waf"
  scope = "REGIONAL"

  default_action {
    allow {}
  }

  rule {
    name     = "RateLimitRule"
    priority = 1

    action {
      block {}
    }

    statement {
      rate_based_statement {
        limit              = 2000
        aggregate_key_type = "IP"
      }
    }

    visibility_config {
      cloudwatch_metrics_enabled = true
      metric_name                = "RateLimitRule"
      sampled_requests_enabled   = true
    }
  }

  visibility_config {
    cloudwatch_metrics_enabled = true
    metric_name                = "WAFACL"
    sampled_requests_enabled   = true
  }
}
`, name, name, name, name, name, name, name, name, name, name, name, name, name, name, name, name, name, name, name, name, name, name, name, name, name)
}

func (g *Generator) generateStaticSite(name string, bp interface{}) string {
	if g.Config.Cloud != "aws" {
		return "# Static site blueprint currently only supports AWS\n"
	}

	denyPublic := ""
	if g.Config.Policies != nil && g.Config.Policies.DenyPublicS3 {
		denyPublic = "  # Public access blocked per policy"
	}

	return fmt.Sprintf(`
# S3 bucket for static site
resource "aws_s3_bucket" "%s" {
  bucket = "${var.project_name}-${var.environment}-%s"
}

resource "aws_s3_bucket_website_configuration" "%s" {
  bucket = aws_s3_bucket.%s.id

  index_document {
    suffix = "index.html"
  }

  error_document {
    key = "error.html"
  }
}

resource "aws_s3_bucket_public_access_block" "%s" {
  bucket = aws_s3_bucket.%s.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
  %s
}

# CloudFront distribution
resource "aws_cloudfront_distribution" "%s" {
  enabled             = true
  default_root_object = "index.html"

  origin {
    domain_name = aws_s3_bucket.%s.bucket_regional_domain_name
    origin_id   = "S3-${aws_s3_bucket.%s.id}"

    s3_origin_config {
      origin_access_identity = aws_cloudfront_origin_access_identity.%s.cloudfront_access_identity_path
    }
  }

  default_cache_behavior {
    allowed_methods        = ["GET", "HEAD", "OPTIONS"]
    cached_methods         = ["GET", "HEAD"]
    target_origin_id       = "S3-${aws_s3_bucket.%s.id}"
    viewer_protocol_policy = "redirect-to-https"

    forwarded_values {
      query_string = false
      cookies {
        forward = "none"
      }
    }
  }

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }
}

resource "aws_cloudfront_origin_access_identity" "%s" {
  comment = "OAI for ${var.project_name}-${var.environment}-%s"
}

resource "aws_s3_bucket_policy" "%s" {
  bucket = aws_s3_bucket.%s.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Sid    = "AllowCloudFrontAccess"
      Effect = "Allow"
      Principal = {
        AWS = aws_cloudfront_origin_access_identity.%s.iam_arn
      }
      Action   = "s3:GetObject"
      Resource = "${aws_s3_bucket.%s.arn}/*"
    }]
  })
}
`, name, name, name, name, name, name, denyPublic, name, name, name, name, name, name, name, name, name, name, name)
}

func (g *Generator) generateDatabase(name string, bp interface{}) string {
	return fmt.Sprintf(`
# Database blueprint: %s
# TODO: Implement database resources based on type
`, name)
}